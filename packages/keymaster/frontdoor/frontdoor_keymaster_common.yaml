## WARNING ##
# This file is automatically generated, any changes
# will be overwritten.

##################################################
################  COMMON ENTITIES  ###############
##################################################

###############  input_boolean:  #################
input_boolean:
  frontdoor_lock_notifications:
    name: frontdoor Lock Notifications
  frontdoor_dooraccess_notifications:
    name: frontdoor Door Notifications
  frontdoor_garageacess_notifications:
    name: frontdoor Garage Notifications
  frontdoor_reset_lock:
    name: frontdoor reset lock
  keymaster_frontdoor_autolock:
    name: 'Auto Lock Enabled'
    icon: mdi:key-remove

###################  script:  ####################
script:
  keymaster_frontdoor_reset_lock:
    sequence:
      - service: script.keymaster_frontdoor_manual_notify
        data_template:
          title: "reset"
          message: "frontdoor"

  keymaster_frontdoor_reset_codeslot:
    mode: parallel
    fields:
      code_slot:
        description: The code slot to reset
        example: 1
    variables:
      # Constant used later to loop through day specific entities
      days: ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    sequence:
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.enabled_frontdoor_{{ code_slot | string }}"
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.frontdoor_name_{{ code_slot | string }}"
          value: ""
      - service: input_text.set_value
        data_template:
          entity_id: "input_text.frontdoor_pin_{{ code_slot | string }}"
          value: ""
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.notify_frontdoor_{{ code_slot | string }}"
      - service: input_number.set_value
        data_template:
          entity_id: "input_number.accesscount_frontdoor_{{ code_slot | string }}"
          value: "0"
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.start_date_frontdoor_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_datetime.set_datetime
        data_template:
          entity_id: "input_datetime.end_date_frontdoor_{{ code_slot | string }}"
          datetime: >-
            {{ now().strftime('%Y-%m-%d 00:00') }}
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.daterange_frontdoor_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.accesslimit_frontdoor_{{ code_slot | string }}"
      - service: input_boolean.turn_off
        data_template:
          entity_id: "input_boolean.reset_codeslot_frontdoor_{{ code_slot | string }}"
      # Loop through each day of the week and reset the entities related to each one
      - repeat:
          count: 7
          sequence:
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_start_date_frontdoor_{{ code_slot | string }}"
                time: "{{ '00:00' | timestamp_custom('%H:%M') }}"
            - service: input_datetime.set_datetime
              data_template:
                entity_id: "input_datetime.{{ days[repeat.index - 1] }}_end_date_frontdoor_{{ code_slot | string }}"
                time: "{{ '00:00' | timestamp_custom('%H:%M') }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_frontdoor_{{ code_slot | string }}"
            - service: input_boolean.turn_on
              data_template:
                entity_id: "input_boolean.{{ days[repeat.index - 1] }}_inc_frontdoor_{{ code_slot | string }}"

  keymaster_frontdoor_refreshnodeinfo:
    description:  'Send MQTT RefreshNodeInfo command'
    sequence:
      - service: system_log.write
        data_template:
          message: "frontdoor_TEMPLATENUM started noderefreshinfo: {{ now() }}"
          level: debug  
      - service: mqtt.publish
        data:
          topic: 'OpenZWave/1/command/refreshnodeinfo/'
          payload: >-
            {% set node_id = state_attr('lock.front_door_lock','node_id') %}
            { "node": {{ node_id }} }
          retain: true

  keymaster_frontdoor_start_timer_retry:
    sequence:
      - condition: state
        entity_id: lock.front_door_lock
        state: 'unlocked'
      - service: timer.cancel
        entity_id:  timer.keymaster_frontdoor_autolock
      - service: timer.start
        data_template:
          entity_id: timer.keymaster_frontdoor_autolock
          duration: 00:00:30

  keymaster_frontdoor_start_timer:
    sequence:
      - condition: state
        entity_id: lock.front_door_lock
        state: 'unlocked'
      - service: timer.cancel
        entity_id:  timer.keymaster_frontdoor_autolock
      - service: timer.start
        data_template:    # if next_dusk happens sooner than next_dawn, then it's daylight
          entity_id: timer.keymaster_frontdoor_autolock
          duration: >
            {% if (((as_timestamp(states.sun.sun.attributes.next_dusk)) > (as_timestamp(states.sun.sun.attributes.next_dawn)))) %}
              {{ states('input_text.keymaster_frontdoor_autolock_door_time_night')}}
            {% else %}
              {{ states('input_text.keymaster_frontdoor_autolock_door_time_day')}}
            {% endif %}
          
###################  automation:  ####################
automation:

  - alias: keymaster_frontdoor Reset Code Slot
    trigger:
      entity_id: input_boolean.reset_codeslot_frontdoor_1,input_boolean.reset_codeslot_frontdoor_2,input_boolean.reset_codeslot_frontdoor_3
      platform: state
      to: 'on'
    action:
      - service: script.keymaster_frontdoor_reset_codeslot
        data_template:
          code_slot: "{{ trigger.entity_id.split('_')[-1] }}"

  - alias: keymaster_frontdoor Lock Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: frontdoor
    condition:
      - condition: state
        entity_id: input_boolean.frontdoor_lock_notifications
        state: "on"
    action:
      - service: script.keymaster_frontdoor_manual_notify
        data_template:
          title: frontdoor
          message: "{{ trigger.event.data.action_text }} {% if trigger.event.data.code_slot > 0 %}({{ trigger.event.data.code_slot_name }}){% endif %}"

  - alias: keymaster_frontdoor User Notifications
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: frontdoor
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.code_slot > 0 }}"
      - condition: template
        value_template: "{{ is_state('input_boolean.notify_frontdoor_' + trigger.event.data.code_slot | string, 'on') }}"
      - condition: state
        entity_id: input_boolean.frontdoor_lock_notifications
        state: "off"
    action:
      - service: script.keymaster_frontdoor_manual_notify
        data_template:
          title: frontdoor
          message: "{{ trigger.event.data.action_text }} ({{ trigger.event.data.code_slot_name }})"

  - alias: keymaster_frontdoor Door Open and Close
    trigger:
      entity_id: binary_sensor.fake
      platform: state
    condition:
      - condition: state
        entity_id: "input_boolean.frontdoor_dooraccess_notifications"
        state: "on"
      - condition: template
        value_template: "{{ trigger.from_state.state in ('on', 'off') and trigger.to_state.state in ('on', 'off') }}"
    action:
      - service: script.keymaster_frontdoor_manual_notify
        data_template:
          title: frontdoor
          message: "{% if trigger.to_state.state == 'on' %}Door Opened{% else %}Door Closed{% endif %}"

  - alias: keymaster_frontdoor Changed Code
    trigger:
      entity_id: input_text.frontdoor_pin_1,input_text.frontdoor_pin_2,input_text.frontdoor_pin_3
      platform: state
    condition:
      - condition: template
        value_template: >-
          {{
            is_state('input_boolean.enabled_frontdoor_' + trigger.entity_id.split('_')[-1], 'on')
            and
            (trigger.from_state.state != trigger.to_state.state)
          }}
    action:
      - service: persistent_notification.create
        data_template:
          title: frontdoor LOCK MANAGER
          message: >-
            {{ 'You changed the PIN for frontdoor code slot ' + trigger.entity_id.split('_')[-1] + '. Please enable it in order to make it active.'}}
      - service: input_boolean.turn_off
        data_template:
          entity_id: >-
            {{ 'input_boolean.enabled_frontdoor_' + trigger.entity_id.split('_')[-1] }}

  - alias: keymaster_frontdoor Reset
    trigger:
      entity_id: input_boolean.frontdoor_reset_lock
      platform: state
      from: "off"
      to: "on"
    action:
      - service: script.keymaster_frontdoor_reset_lock
      - service: input_boolean.turn_off
        entity_id: input_boolean.frontdoor_reset_lock

  - alias: keymaster_frontdoor Decrement Access Count
    trigger:
      platform: event
      event_type: keymaster_lock_state_changed
      event_data:
        lockname: frontdoor
    condition:
      - condition: template
        # make sure decrementing access entries is enabled 
        value_template: "{{ is_state('input_boolean.accesslimit_frontdoor_' + trigger.event.data.code_slot | string, 'on') }}"
      - condition: template
        # Check for Keypad Unlock code
        value_template: >-
          {{
            trigger.event.data.code_slot > 0
            and
            (trigger.event.data.action_code is undefined or trigger.event.data.action_code in (6, 19))
          }}
    action:
      - service: input_number.decrement
        data_template:
          entity_id: "{{ 'input_number.accesscount_frontdoor_' + trigger.event.data.code_slot | string }}"

  - alias: keymaster_frontdoor_locked
    trigger:
      entity_id: lock.front_door_lock
      platform: state
      to: locked
    action:
      - service: timer.cancel
        entity_id: timer.keymaster_frontdoor_autolock
        
  - alias: keymaster_frontdoor_unlocked
    trigger:
      entity_id: lock.front_door_lock
      platform: state
      to: unlocked
    condition:
      - condition: state
        entity_id: input_boolean.keymaster_frontdoor_autolock
        state: "on"
    action:
      - service: script.turn_on
        entity_id: script.keymaster_frontdoor_start_timer
      
  - alias: keymaster_frontdoor_timer_finished
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.keymaster_frontdoor_autolock
    action:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ (states('binary_sensor.fake') != 'on') }}"
          sequence:
            - service: lock.lock
              entity_id: lock.front_door_lock
        - conditions:
            - condition: template
              value_template: "{{ (states('binary_sensor.fake') == 'on') }}"
          sequence:
            - service: script.keymaster_frontdoor_start_timer_retry
        
  - alias: keymaster_frontdoor_disable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_frontdoor_autolock
      platform: state
      to: 'off'
    action:
      - service: timer.cancel
        entity_id:
          - timer.keymaster_frontdoor_autolock
      - service: lock.unlock
        entity_id: lock.front_door_lock
       
  - alias: keymaster_frontdoor_enable_auto_lock
    trigger:
      entity_id: input_boolean.keymaster_frontdoor_autolock
      platform: state
      to: 'on'
    action:
      - service: timer.cancel
        entity_id:
          - timer.keymaster_frontdoor_autolock
      - service: lock.lock
        entity_id: lock.front_door_lock

###############  input_text:  #################
input_text:
  frontdoor_lockname:
    initial: frontdoor
    name: 'Lock Name'

  keymaster_frontdoor_autolock_door_time_day:
    name: 'Day Auto Lock HH:MM:SS'
    initial: '00:15:00'
  keymaster_frontdoor_autolock_door_time_night:
    name: 'Night Auto Lock HH:MM:SS'
    initial: '00:05:00'

###################  timer:  ####################
timer:
  keymaster_frontdoor_autolock:
    name: 'Auto Lock Timer'
